❌checkRegExpForOptimizations
➖j2clSourceFileChecker
➖removeCastNodes
➖typesToColors
❌removeUnnecessarySyntheticExterns
❌injectTranspilationRuntimeLibraries
❌rewritePolyfills
❌injectRuntimeLibrariesForOptimizations
➖closureProvidesRequires
➖replaceMessagesForChrome
➖ReplaceMessages
➖protectLocaleData
❌processDefinesOptimize
❌addEarlyOptimizationTranspilationPasses()
❌normalize
❌gatherGettersAndSetters
➖j2clUtilGetDefineRewriterPass
❌instrumentForCodeCoverage
❌gatherExternPropertiesOptimize
❌optimizeArgumentsArray
➖closureCodeRemoval
➖j2clAssertRemovalPass
❌inlineAndCollapseProperties
➖stripCode
➖replaceIdGenerators
➖j2clPropertyInlinerPass
❌inferConsts
➖checkConstParams
❌earlyInlineVariables
❌earlyPeepholeOptimizations
❌removeUnusedCodeOnce
✅disambiguateProperties
❌markPureFunctions
❌inlineVariables
❌inlineConstants
❌collapseObjectLiterals
❌removeUnusedCode
❌peepholeOptimizations
❌removeUnreachableCode
➖closureOptimizePrimitives
➖replaceStrings
❌crossModuleCodeMotion
❌devirtualizeMethods
❌flowSensitiveInlineVariables
❌inlineSimpleMethods
❌inlineProperties
❌deadPropertyAssignmentElimination
❌optimizeCalls
➖j2clConstantHoisterPass
➖j2clClinitPass
❌inlineFunctions
❌deadAssignmentsElimination
❌crossModuleMethodMotion
➖substituteLocaleData
❌optimizeConstructors
❌isolatePolyfills
❌collapseAnonymousFunctions
➖rewriteGlobalDeclarationsForTryCatchWrapping
❌extractPrototypeMemberDeclarations
❌renameProperties
✅ambiguateProperties
❌gatherRawExports
❌convertToDottedProperties
❌rewriteFunctionExpressions
❌aliasStrings
✅coalesceVariableNames
❌peepholeOptimizationsOnce
❌exploitAssign
❌collapseVariableDeclarations
❌denormalize
➖invertContextualRenaming
✅renameVars
✅renameLabels
❌latePeepholeOptimizations
➖stripSideEffectProtection
❌rescopeGlobalSymbols
✅optimizeToEs6
❌convertChunksToESModules

At a glance, it appears that the only optimisation passes that rely on types (or at least 'colors') are:
❌inlineProperties
✅ambiguateProperties
✅disambiguateProperties

