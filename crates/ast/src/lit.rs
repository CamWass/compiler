use crate::{GetNodeId, NodeId};
use atoms::JsWord;
use clone_node::CloneNode;
use global_common::integer_decode::integer_decode;
use node_id::GetNodeIdMacro;
use num_bigint::BigInt as BigIntValue;
use std::{
    fmt::{self, Display, Formatter},
    hash::{Hash, Hasher},
};

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode, Eq, Hash)]
pub enum Lit {
    Str(Str),

    Bool(Bool),

    Null(Null),

    Num(Number),

    BigInt(BigInt),

    Regex(Regex),
}

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode, Eq, Hash)]
pub struct BigInt {
    pub node_id: NodeId,
    pub value: BigIntValue,
}

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode, Eq, Hash)]
pub struct Str {
    pub node_id: NodeId,

    pub value: JsWord,

    /// This includes line escape.
    pub has_escape: bool,

    pub kind: StrKind,
}

/// THis enum determines how string literal should be printed.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum StrKind {
    /// Span of string points to original source code, and codegen should use
    /// it.
    //
    /// **Note**: Giving wrong value to this field will result in invalid
    /// codegen.
    Normal {
        /// Does span of this string literal contains quote?
        ///
        /// True for string literals generated by parser, false for string
        /// literals generated by various passes.
        contains_quote: bool,
    },
    /// If the span of string does not point a string literal, mainly because
    /// this string is synthesized, this variant should be used.
    Synthesized,
}

impl crate::CloneNode for StrKind {
    fn clone_node(&self, _: &mut crate::ProgramData) -> Self {
        *self
    }
}

impl Default for StrKind {
    fn default() -> Self {
        Self::Synthesized
    }
}

impl Str {
    #[inline]
    pub fn is_empty(&self) -> bool {
        self.value.is_empty()
    }
}

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode, Eq, Hash)]
pub struct Bool {
    pub node_id: NodeId,
    pub value: bool,
}

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode, Eq, Hash)]
pub struct Null {
    pub node_id: NodeId,
}

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode, Eq, Hash)]
pub struct Regex {
    pub node_id: NodeId,

    pub exp: JsWord,

    pub flags: JsWord,
}

#[derive(Debug, PartialEq, GetNodeIdMacro, CloneNode)]
pub struct Number {
    pub node_id: NodeId,
    /// **Note**: This should not be `NaN`. Use [crate::Ident] to represent NaN.
    ///
    /// If you store `NaN` in this field, a hash map will behave strangely.
    pub value: f64,

    /// The exact, original representaion of this number, as it was in the input.
    /// `None` if this node was created synthetically (by a compiler pass).
    pub raw: Option<JsWord>,
}

impl Eq for Number {}

#[allow(clippy::derived_hash_with_manual_eq)]
impl Hash for Number {
    fn hash<H: Hasher>(&self, state: &mut H) {
        integer_decode(self.value).hash(state);
    }
}

impl Display for Number {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        if self.value.is_infinite() {
            if self.value.is_sign_positive() {
                Display::fmt("Infinity", f)
            } else {
                Display::fmt("-Infinity", f)
            }
        } else {
            Display::fmt(&self.value, f)
        }
    }
}
