use crate::{jsx::JSXText, node::NodeId};
use ast_node2::ast_node;
use global_common::{EqIgnoreSpan, Span};
use num_bigint::BigInt as BigIntValue;
use std::{
    fmt::{self, Display, Formatter},
    hash::{Hash, Hasher},
};
use swc_atoms::JsWord;

#[ast_node]
#[derive(Eq, Hash, Copy, EqIgnoreSpan)]
pub enum Lit<'ast> {
    Str(&'ast Str),
    Bool(&'ast Bool),
    Null(&'ast Null),
    Num(&'ast Number),
    BigInt(&'ast BigInt),
    Regex(&'ast Regex),
    JSXText(&'ast JSXText),
}

#[ast_node]
#[derive(Eq, Hash, EqIgnoreSpan)]
pub struct BigInt {
    pub node_id: NodeId,
    pub span: Span,
    pub value: BigIntValue,
}

#[ast_node]
#[derive(Eq, Hash, EqIgnoreSpan)]
pub struct Str {
    pub node_id: NodeId,
    pub span: Span,

    pub value: JsWord,

    /// This includes line escape.
    pub has_escape: bool,
    pub kind: StrKind,
}

/// This enum determines how string literal should be printed.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]

pub enum StrKind {
    /// Span of string points to original source code, and codegen should use
    /// it.
    //
    /// **Note**: Giving wrong value to this field will result in invalid
    /// codegen.
    Normal {
        /// Does span of this string literal contains quote?
        ///
        /// True for string literals generated by parser, false for string
        /// literals generated by various passes.
        contains_quote: bool,
    },
    /// If the span of string does not point a string literal, mainly because
    /// this string is synthesized, this variant should be used.
    Synthesized,
}

/// Always returns true as this is not a data of a string literal.
impl EqIgnoreSpan for StrKind {
    fn eq_ignore_span(&self, _: &Self) -> bool {
        true
    }
}

impl Default for StrKind {
    fn default() -> Self {
        Self::Synthesized
    }
}

impl Str {
    #[inline]
    pub fn is_empty(&self) -> bool {
        self.value.is_empty()
    }
}

#[ast_node]
#[derive(Copy, Eq, Hash, EqIgnoreSpan)]
pub struct Bool {
    pub node_id: NodeId,
    pub span: Span,
    pub value: bool,
}

#[ast_node]
#[derive(Copy, Eq, Hash, EqIgnoreSpan)]
pub struct Null {
    pub node_id: NodeId,
    pub span: Span,
}

#[ast_node]
#[derive(Eq, Hash, EqIgnoreSpan)]
pub struct Regex {
    pub node_id: NodeId,
    pub span: Span,

    pub exp: JsWord,
    pub flags: JsWord,
}

#[ast_node]
#[derive(Copy, EqIgnoreSpan)]
pub struct Number {
    pub node_id: NodeId,
    pub span: Span,
    /// **Note**: This should not be `NaN`. Use [crate::Ident] to represent NaN.
    ///
    /// If you store `NaN` in this field, a hash map will behave strangely.
    #[use_eq]
    pub value: f64,
}

impl Eq for Number {}

#[allow(clippy::derive_hash_xor_eq)]
impl Hash for Number {
    fn hash<H: Hasher>(&self, state: &mut H) {
        // See: https://stackoverflow.com/a/39639200/
        fn integer_decode(val: f64) -> (u64, i16, i8) {
            let bits = val.to_bits();
            let sign: i8 = if bits >> 63 == 0 { 1 } else { -1 };
            let mut exponent: i16 = ((bits >> 52) & 0x7ff) as i16;
            let mantissa = if exponent == 0 {
                (bits & 0xfffffffffffff) << 1
            } else {
                (bits & 0xfffffffffffff) | 0x10000000000000
            };

            exponent -= 1023 + 52;
            (mantissa, exponent, sign)
        }

        self.span.hash(state);
        integer_decode(self.value).hash(state);
    }
}

impl Display for Number {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        if self.value.is_infinite() {
            if self.value.is_sign_positive() {
                Display::fmt("Infinity", f)
            } else {
                Display::fmt("-Infinity", f)
            }
        } else {
            Display::fmt(&self.value, f)
        }
    }
}